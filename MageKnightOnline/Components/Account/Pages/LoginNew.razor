@page "/Account/LoginNew"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using MageKnightOnline.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<LoginNew> Logger
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<PageTitle>Log in</PageTitle>

<h1>Log in</h1>
<div class="row">
    <div class="col-lg-6">
        <section>
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">@errorMessage</div>
            }
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <h2>Use a local account to log in.</h2>
                <hr />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label for="Input.Email" class="form-label">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                    <label for="Input.Password" class="form-label">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="checkbox mb-3">
                    <label class="form-label">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                        Remember me
                    </label>
                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                </div>
            </EditForm>
        </section>
    </div>
</div>

@code {
    private string? errorMessage;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    public async Task LoginUser()
    {
        Logger.LogInformation("Login attempt for email: {Email}", Input.Email);
        
        try
        {
            var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
            
            if (result.Succeeded)
            {
                Logger.LogInformation("User logged in successfully.");
                // Use JavaScript to navigate to avoid cookie issues
                await JS.InvokeVoidAsync("window.location.href", ReturnUrl ?? "/");
                return;
            }
            else
            {
                errorMessage = "Error: Invalid login attempt.";
                Logger.LogWarning("Login failed for email: {Email}", Input.Email);
            }
        }
        catch (InvalidOperationException ex) when (ex.Message.Contains("Headers are read-only"))
        {
            Logger.LogInformation("Headers read-only, using JavaScript redirect for: {Email}", Input.Email);
            // Assume login succeeded and redirect with JavaScript
            await JS.InvokeVoidAsync("window.location.href", ReturnUrl ?? "/");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Unexpected error during login");
            errorMessage = "Error: An unexpected error occurred during login.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
