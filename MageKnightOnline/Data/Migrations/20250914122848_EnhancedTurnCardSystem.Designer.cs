// <auto-generated />
using System;
using MageKnightOnline.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MageKnightOnline.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250914122848_EnhancedTurnCardSystem")]
    partial class EnhancedTurnCardSystem
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("MageKnightOnline.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MageKnightOnline.Models.Artifact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Attack")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Block")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cost")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("Fame")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<int>("Influence")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsConsumable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPermanent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Move")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Rarity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Reputation")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Set")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SpecialEffect")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Uses")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Artifacts");
                });

            modelBuilder.Entity("MageKnightOnline.Models.BoardTile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GameBoardId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsExplored")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRevealed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MovementCost")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SiteId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Terrain")
                        .HasColumnType("TEXT");

                    b.Property<string>("TileImageName")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<int>("X")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Y")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GameBoardId");

                    b.HasIndex("SiteId");

                    b.ToTable("BoardTiles");
                });

            modelBuilder.Entity("MageKnightOnline.Models.Combat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CurrentParticipantId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentTurn")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("GameSessionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SiteId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GameSessionId");

                    b.HasIndex("SiteId");

                    b.ToTable("Combats");
                });

            modelBuilder.Entity("MageKnightOnline.Models.CombatAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActionType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CombatId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("ParticipantId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TargetId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CombatId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("CombatActions");
                });

            modelBuilder.Entity("MageKnightOnline.Models.CombatParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AttackValue")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BlockValue")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CombatId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrentHealth")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EnemyId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Health")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Initiative")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDefeated")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CombatId");

                    b.HasIndex("EnemyId");

                    b.HasIndex("PlayerId");

                    b.ToTable("CombatParticipants");
                });

            modelBuilder.Entity("MageKnightOnline.Models.Enemy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AttackValue")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BlockValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("Health")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<int>("Initiative")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LootTable")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("SpecialAbilities")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Enemies");
                });

            modelBuilder.Entity("MageKnightOnline.Models.EnhancedPlayerHand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GameSessionId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxHandSize")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GameSessionId");

                    b.HasIndex("PlayerId");

                    b.ToTable("EnhancedPlayerHands");
                });

            modelBuilder.Entity("MageKnightOnline.Models.GameAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActionSequence")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Data")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("GameSessionId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("TurnNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GameSessionId");

                    b.HasIndex("PlayerId");

                    b.ToTable("GameActions");
                });

            modelBuilder.Entity("MageKnightOnline.Models.GameBoard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GameSessionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MapType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Width")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GameSessionId");

                    b.ToTable("GameBoards");
                });

            modelBuilder.Entity("MageKnightOnline.Models.GameEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Data")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("GameStateId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("TurnNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GameStateId");

                    b.HasIndex("PlayerId");

                    b.ToTable("GameEvents");
                });

            modelBuilder.Entity("MageKnightOnline.Models.GamePlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Crystals")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentCrystals")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentHealth")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentMana")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeckSize")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DiscardSize")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EnemiesDefeated")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EquippedArtifacts")
                        .HasColumnType("TEXT");

                    b.Property<int>("Experience")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExperienceToNextLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Fame")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GameSessionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HandSize")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasPassed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCurrentPlayer")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("KnightName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LeftAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Mana")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxCrystals")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxHealth")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxMana")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Reputation")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SitesConquered")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalFameEarned")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalReputationEarned")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UnlockedAbilities")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Wounds")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("GameSessionId", "PlayerNumber")
                        .IsUnique();

                    b.HasIndex("GameSessionId", "UserId")
                        .IsUnique();

                    b.ToTable("GamePlayers");
                });

            modelBuilder.Entity("MageKnightOnline.Models.GameSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrentPlayers")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("HostUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("HostUserId");

                    b.ToTable("GameSessions");
                });

            modelBuilder.Entity("MageKnightOnline.Models.GameState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentPhase")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CurrentPlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CurrentWeather")
                        .HasColumnType("TEXT");

                    b.Property<int>("DayRounds")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GamePhase")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GameSessionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GlobalFame")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GlobalReputation")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsNightPhase")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<int>("NightRounds")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoundNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TurnNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CurrentPlayerId");

                    b.HasIndex("GameSessionId");

                    b.ToTable("GameStates");
                });

            modelBuilder.Entity("MageKnightOnline.Models.GameTurn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActionPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActionsRemaining")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AttackPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BlockPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CrystalsAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentPlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("GameSessionId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasPassed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InfluencePoints")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ManaAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxActionPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxAttackPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxBlockPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxInfluencePoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxMovementPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MovementPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Phase")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("TurnNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsedActionPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsedAttackPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsedBlockPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsedInfluencePoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsedMovementPoints")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CurrentPlayerId");

                    b.HasIndex("GameSessionId");

                    b.ToTable("GameTurns");
                });

            modelBuilder.Entity("MageKnightOnline.Models.MageKnightCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AcquisitionMethod")
                        .HasColumnType("TEXT");

                    b.Property<int>("Attack")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AttackPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Block")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BlockPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardSubType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cost")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CrystalCost")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("Fame")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FameValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<int>("Influence")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InfluencePoints")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsArtifact")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPermanent")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPlayable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSpell")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsUnit")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ManaCost")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Move")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MovePoints")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Reputation")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReputationValue")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Set")
                        .HasColumnType("TEXT");

                    b.Property<string>("SpecialEffects")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("MageKnightCards");
                });

            modelBuilder.Entity("MageKnightOnline.Models.MapTile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Category")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCity")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PlacedAtX")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PlacedAtY")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Rotation")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TileDeckId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TileNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TileDeckId");

                    b.ToTable("MapTiles");
                });

            modelBuilder.Entity("MageKnightOnline.Models.PlayerArtifact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AcquiredAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("ArtifactId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GamePlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEquipped")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsesRemaining")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ArtifactId");

                    b.HasIndex("GamePlayerId");

                    b.ToTable("PlayerArtifacts");
                });

            modelBuilder.Entity("MageKnightOnline.Models.PlayerCardAcquisition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AcquiredAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("AcquisitionMethod")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EnhancedPlayerHandId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GameSessionId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsInDeck")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsInDiscard")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsInHand")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPermanent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("EnhancedPlayerHandId");

                    b.HasIndex("GameSessionId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerCardAcquisitions");
                });

            modelBuilder.Entity("MageKnightOnline.Models.PlayerDeck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeckPosition")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GamePlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDrawn")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("GamePlayerId");

                    b.ToTable("PlayerDecks");
                });

            modelBuilder.Entity("MageKnightOnline.Models.PlayerDiscard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DiscardPosition")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DiscardedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("GamePlayerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("GamePlayerId");

                    b.ToTable("PlayerDiscards");
                });

            modelBuilder.Entity("MageKnightOnline.Models.PlayerHand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AddedToHand")
                        .HasColumnType("TEXT");

                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GamePlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HandPosition")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPlayed")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("GamePlayerId");

                    b.ToTable("PlayerHands");
                });

            modelBuilder.Entity("MageKnightOnline.Models.PlayerPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GameBoardId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("MovedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("MovementPointsUsed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("X")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Y")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GameBoardId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerPositions");
                });

            modelBuilder.Entity("MageKnightOnline.Models.PlayerSpell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ActivatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("GamePlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLearned")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LearnedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("SpellId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UsesRemaining")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GamePlayerId");

                    b.HasIndex("SpellId");

                    b.ToTable("PlayerSpells");
                });

            modelBuilder.Entity("MageKnightOnline.Models.PlayerUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentHealth")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GamePlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDefeated")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeployed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRecruited")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsWounded")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PositionX")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PositionY")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RecruitedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("UnitId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GamePlayerId");

                    b.HasIndex("UnitId");

                    b.ToTable("PlayerUnits");
                });

            modelBuilder.Entity("MageKnightOnline.Models.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ArtifactReward")
                        .HasColumnType("TEXT");

                    b.Property<int>("AttackCost")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ConqueredAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ConqueredByPlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CrystalsReward")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("DifficultyLevel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EnemyIds")
                        .HasColumnType("TEXT");

                    b.Property<int>("FameReward")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GameBoardId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsConquered")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsExplored")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRepeatable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LootTable")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ReputationReward")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RequiredLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SiteSubType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SpecialRequirements")
                        .HasColumnType("TEXT");

                    b.Property<string>("SpellReward")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UnitReward")
                        .HasColumnType("TEXT");

                    b.Property<int>("X")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Y")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ConqueredByPlayerId");

                    b.HasIndex("GameBoardId");

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("MageKnightOnline.Models.SiteEnemy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Attack")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Block")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentHealth")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FameReward")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Health")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDefeated")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ReputationReward")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SiteId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SpecialAbilities")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.ToTable("SiteEnemies");
                });

            modelBuilder.Entity("MageKnightOnline.Models.Spell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Attack")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Block")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CrystalCost")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("Fame")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<int>("Influence")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsInstant")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPersistent")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ManaCost")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Move")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Range")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Reputation")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Set")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SpecialEffect")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Spells");
                });

            modelBuilder.Entity("MageKnightOnline.Models.TileDeck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GameSessionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GameSessionId");

                    b.ToTable("TileDecks");
                });

            modelBuilder.Entity("MageKnightOnline.Models.TileSite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MapTileId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Section")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SiteType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MapTileId");

                    b.ToTable("TileSites");
                });

            modelBuilder.Entity("MageKnightOnline.Models.TileTerrainSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MapTileId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MovementCost")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Section")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TerrainType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MapTileId");

                    b.ToTable("TileTerrainSections");
                });

            modelBuilder.Entity("MageKnightOnline.Models.TurnAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActionPointsCost")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActionSequence")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AttackPointsCost")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BlockPointsCost")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Data")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("GameTurnId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InfluencePointsCost")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsUndoable")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MovementPointsCost")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Result")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("GameTurnId");

                    b.HasIndex("PlayerId");

                    b.ToTable("TurnActions");
                });

            modelBuilder.Entity("MageKnightOnline.Models.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Attack")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Block")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Cost")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("Fame")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Health")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<int>("Influence")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsElite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMage")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMercenary")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Move")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Rarity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Reputation")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Set")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SpecialAbilities")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MageKnightOnline.Models.BoardTile", b =>
                {
                    b.HasOne("MageKnightOnline.Models.GameBoard", "GameBoard")
                        .WithMany("Tiles")
                        .HasForeignKey("GameBoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MageKnightOnline.Models.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("GameBoard");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("MageKnightOnline.Models.Combat", b =>
                {
                    b.HasOne("MageKnightOnline.Models.GameSession", "GameSession")
                        .WithMany()
                        .HasForeignKey("GameSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MageKnightOnline.Models.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("GameSession");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("MageKnightOnline.Models.CombatAction", b =>
                {
                    b.HasOne("MageKnightOnline.Models.Combat", "Combat")
                        .WithMany("Actions")
                        .HasForeignKey("CombatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MageKnightOnline.Models.CombatParticipant", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Combat");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("MageKnightOnline.Models.CombatParticipant", b =>
                {
                    b.HasOne("MageKnightOnline.Models.Combat", "Combat")
                        .WithMany("Participants")
                        .HasForeignKey("CombatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MageKnightOnline.Models.Enemy", "Enemy")
                        .WithMany()
                        .HasForeignKey("EnemyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MageKnightOnline.Models.GamePlayer", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Combat");

                    b.Navigation("Enemy");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("MageKnightOnline.Models.EnhancedPlayerHand", b =>
                {
                    b.HasOne("MageKnightOnline.Models.GameSession", "GameSession")
                        .WithMany()
                        .HasForeignKey("GameSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MageKnightOnline.Models.GamePlayer", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameSession");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("MageKnightOnline.Models.GameAction", b =>
                {
                    b.HasOne("MageKnightOnline.Models.GameSession", "GameSession")
                        .WithMany("Actions")
                        .HasForeignKey("GameSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MageKnightOnline.Models.GamePlayer", "Player")
                        .WithMany("Actions")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("GameSession");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("MageKnightOnline.Models.GameBoard", b =>
                {
                    b.HasOne("MageKnightOnline.Models.GameSession", "GameSession")
                        .WithMany()
                        .HasForeignKey("GameSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameSession");
                });

            modelBuilder.Entity("MageKnightOnline.Models.GameEvent", b =>
                {
                    b.HasOne("MageKnightOnline.Models.GameState", "GameState")
                        .WithMany("Events")
                        .HasForeignKey("GameStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MageKnightOnline.Models.GamePlayer", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("GameState");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("MageKnightOnline.Models.GamePlayer", b =>
                {
                    b.HasOne("MageKnightOnline.Models.GameSession", "GameSession")
                        .WithMany("Players")
                        .HasForeignKey("GameSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MageKnightOnline.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameSession");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MageKnightOnline.Models.GameSession", b =>
                {
                    b.HasOne("MageKnightOnline.Data.ApplicationUser", "HostUser")
                        .WithMany()
                        .HasForeignKey("HostUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("HostUser");
                });

            modelBuilder.Entity("MageKnightOnline.Models.GameState", b =>
                {
                    b.HasOne("MageKnightOnline.Models.GamePlayer", "CurrentPlayer")
                        .WithMany()
                        .HasForeignKey("CurrentPlayerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MageKnightOnline.Models.GameSession", "GameSession")
                        .WithMany()
                        .HasForeignKey("GameSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentPlayer");

                    b.Navigation("GameSession");
                });

            modelBuilder.Entity("MageKnightOnline.Models.GameTurn", b =>
                {
                    b.HasOne("MageKnightOnline.Models.GamePlayer", "CurrentPlayer")
                        .WithMany()
                        .HasForeignKey("CurrentPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MageKnightOnline.Models.GameSession", "GameSession")
                        .WithMany()
                        .HasForeignKey("GameSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentPlayer");

                    b.Navigation("GameSession");
                });

            modelBuilder.Entity("MageKnightOnline.Models.MapTile", b =>
                {
                    b.HasOne("MageKnightOnline.Models.TileDeck", "TileDeck")
                        .WithMany("Tiles")
                        .HasForeignKey("TileDeckId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("TileDeck");
                });

            modelBuilder.Entity("MageKnightOnline.Models.PlayerArtifact", b =>
                {
                    b.HasOne("MageKnightOnline.Models.Artifact", "Artifact")
                        .WithMany()
                        .HasForeignKey("ArtifactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MageKnightOnline.Models.GamePlayer", "GamePlayer")
                        .WithMany()
                        .HasForeignKey("GamePlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artifact");

                    b.Navigation("GamePlayer");
                });

            modelBuilder.Entity("MageKnightOnline.Models.PlayerCardAcquisition", b =>
                {
                    b.HasOne("MageKnightOnline.Models.MageKnightCard", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MageKnightOnline.Models.EnhancedPlayerHand", null)
                        .WithMany("Cards")
                        .HasForeignKey("EnhancedPlayerHandId");

                    b.HasOne("MageKnightOnline.Models.GameSession", "GameSession")
                        .WithMany()
                        .HasForeignKey("GameSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MageKnightOnline.Models.GamePlayer", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("GameSession");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("MageKnightOnline.Models.PlayerDeck", b =>
                {
                    b.HasOne("MageKnightOnline.Models.MageKnightCard", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MageKnightOnline.Models.GamePlayer", "GamePlayer")
                        .WithMany()
                        .HasForeignKey("GamePlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("GamePlayer");
                });

            modelBuilder.Entity("MageKnightOnline.Models.PlayerDiscard", b =>
                {
                    b.HasOne("MageKnightOnline.Models.MageKnightCard", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MageKnightOnline.Models.GamePlayer", "GamePlayer")
                        .WithMany()
                        .HasForeignKey("GamePlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("GamePlayer");
                });

            modelBuilder.Entity("MageKnightOnline.Models.PlayerHand", b =>
                {
                    b.HasOne("MageKnightOnline.Models.MageKnightCard", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MageKnightOnline.Models.GamePlayer", "GamePlayer")
                        .WithMany()
                        .HasForeignKey("GamePlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("GamePlayer");
                });

            modelBuilder.Entity("MageKnightOnline.Models.PlayerPosition", b =>
                {
                    b.HasOne("MageKnightOnline.Models.GameBoard", "GameBoard")
                        .WithMany("PlayerPositions")
                        .HasForeignKey("GameBoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MageKnightOnline.Models.GamePlayer", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameBoard");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("MageKnightOnline.Models.PlayerSpell", b =>
                {
                    b.HasOne("MageKnightOnline.Models.GamePlayer", "GamePlayer")
                        .WithMany()
                        .HasForeignKey("GamePlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MageKnightOnline.Models.Spell", "Spell")
                        .WithMany()
                        .HasForeignKey("SpellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GamePlayer");

                    b.Navigation("Spell");
                });

            modelBuilder.Entity("MageKnightOnline.Models.PlayerUnit", b =>
                {
                    b.HasOne("MageKnightOnline.Models.GamePlayer", "GamePlayer")
                        .WithMany()
                        .HasForeignKey("GamePlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MageKnightOnline.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GamePlayer");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("MageKnightOnline.Models.Site", b =>
                {
                    b.HasOne("MageKnightOnline.Models.GamePlayer", "ConqueredByPlayer")
                        .WithMany()
                        .HasForeignKey("ConqueredByPlayerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MageKnightOnline.Models.GameBoard", "GameBoard")
                        .WithMany("Sites")
                        .HasForeignKey("GameBoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConqueredByPlayer");

                    b.Navigation("GameBoard");
                });

            modelBuilder.Entity("MageKnightOnline.Models.SiteEnemy", b =>
                {
                    b.HasOne("MageKnightOnline.Models.Site", "Site")
                        .WithMany("Enemies")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Site");
                });

            modelBuilder.Entity("MageKnightOnline.Models.TileDeck", b =>
                {
                    b.HasOne("MageKnightOnline.Models.GameSession", "GameSession")
                        .WithMany()
                        .HasForeignKey("GameSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameSession");
                });

            modelBuilder.Entity("MageKnightOnline.Models.TileSite", b =>
                {
                    b.HasOne("MageKnightOnline.Models.MapTile", "MapTile")
                        .WithMany("Sites")
                        .HasForeignKey("MapTileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MapTile");
                });

            modelBuilder.Entity("MageKnightOnline.Models.TileTerrainSection", b =>
                {
                    b.HasOne("MageKnightOnline.Models.MapTile", "MapTile")
                        .WithMany("TerrainSections")
                        .HasForeignKey("MapTileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MapTile");
                });

            modelBuilder.Entity("MageKnightOnline.Models.TurnAction", b =>
                {
                    b.HasOne("MageKnightOnline.Models.MageKnightCard", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MageKnightOnline.Models.GameTurn", "GameTurn")
                        .WithMany("Actions")
                        .HasForeignKey("GameTurnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MageKnightOnline.Models.GamePlayer", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("GameTurn");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MageKnightOnline.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MageKnightOnline.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MageKnightOnline.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MageKnightOnline.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MageKnightOnline.Models.Combat", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("MageKnightOnline.Models.EnhancedPlayerHand", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("MageKnightOnline.Models.GameBoard", b =>
                {
                    b.Navigation("PlayerPositions");

                    b.Navigation("Sites");

                    b.Navigation("Tiles");
                });

            modelBuilder.Entity("MageKnightOnline.Models.GamePlayer", b =>
                {
                    b.Navigation("Actions");
                });

            modelBuilder.Entity("MageKnightOnline.Models.GameSession", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("MageKnightOnline.Models.GameState", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("MageKnightOnline.Models.GameTurn", b =>
                {
                    b.Navigation("Actions");
                });

            modelBuilder.Entity("MageKnightOnline.Models.MapTile", b =>
                {
                    b.Navigation("Sites");

                    b.Navigation("TerrainSections");
                });

            modelBuilder.Entity("MageKnightOnline.Models.Site", b =>
                {
                    b.Navigation("Enemies");
                });

            modelBuilder.Entity("MageKnightOnline.Models.TileDeck", b =>
                {
                    b.Navigation("Tiles");
                });
#pragma warning restore 612, 618
        }
    }
}
